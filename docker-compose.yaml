version: '3.8'

services:
  control-unit:
    build:
      context: ./ControlUnit
      dockerfile: Dockerfile
    container_name: control-unit
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - traffic-light-network
    environment:
      RABBIT_HOSTNAME: rabbitmq

  traffic-light:
    build:
      context: ./TrafficLight
      dockerfile: Dockerfile
    container_name: traffic-light
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - traffic-light-network
    environment:
      RABBIT_HOSTNAME: rabbitmq

  database-service:
    build:
      context: ./DatabaseService
      dockerfile: Dockerfile
    container_name: database-service
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - traffic-light-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - traffic-light-network
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 10s
      retries: 10
  
  database:
    image: postgres:latest
    container_name: database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    restart: always
    networks:
      - traffic-light-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
networks:
  traffic-light-network:
    driver: bridge